<?php

/**
 * @file
 * Localgov Guides module hooks.
 */

use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function localgov_guides_theme($existing, $type, $theme, $path) {
  return [
    'guide_contents' => [
      'variables' => [
        'links' => [],
        'format' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function localgov_guides_node_insert(NodeInterface $node) {
  localgov_guides_node_update($node);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Implements reference back on overview to page when pages are created.
 */
function localgov_guides_node_update(NodeInterface $node) {
  if ($node->bundle() == 'localgov_guides_page') {
    if ($parent = $node->localgov_guides_parent->entity) {
      if (array_search(['target_id' => $node->id()], $parent->localgov_guides_pages->getValue()) === FALSE) {
        $parent->localgov_guides_pages->appendItem(['target_id' => $node->id()]);
        $parent->save();
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add extra fields to the guide pages.
 */
function localgov_guides_preprocess_node(&$variables) {
  $node = $variables['node'];
  assert($node instanceof NodeInterface);

  if ($node->bundle() == 'localgov_guides_overview') {
    $variables['next_url'] = '';
    if (!empty($node->localgov_guides_pages->entity)) {
      $variables['next_url'] = $node->localgov_guides_pages->entity->toUrl();
    }
  }

  if ($node->bundle() == 'localgov_guides_page') {
    $variables['next_url'] = '';
    $variables['previous_url'] = '';
    if ($parent = $node->localgov_guides_parent->entity) {
      if (!empty($parent->localgov_guides_pages)) {
        $page_delta = array_search(['target_id' => $node->id()], $parent->localgov_guides_pages->getValue());
        $variables['previous_url'] = !empty($parent->localgov_guides_pages[$page_delta - 1]->entity) ? $parent->localgov_guides_pages[$page_delta - 1]->entity->toUrl() : '';
        $variables['next_url'] = !empty($parent->localgov_guides_pages[$page_delta + 1]->entity) ? $parent->localgov_guides_pages[$page_delta + 1]->entity->toUrl() : '';
      }
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function localgov_guides_modules_installed($modules) {
  $services = in_array('localgov_services_navigation', $modules);
  $topics = in_array('localgov_topics', $modules);
  if ($services || $topics) {
    \Drupal::service('config.installer')->installOptionalConfig();
    localgov_guides_optional_fields_settings($services, $topics);
  }
}

/**
 * Set form settings for optional services and topic fields on installation.
 *
 * @param bool $services
 *   If localgov_services is (being) installed.
 * @param bool $topics
 *   If localgov_topics is (being) installed.
 */
function localgov_guides_optional_fields_settings($services, $topics) {
  $properties = [
    'targetEntityType' => 'node',
    'bundle' => 'localgov_guides_overview',
  ];
  if ($form_displays = \Drupal::entityTypeManager()->getStorage('entity_form_display')->loadByProperties($properties)) {
    foreach ($form_displays as $form_display) {
      assert($form_display instanceof EntityFormDisplayInterface);
      if ($services && !$form_display->getComponent('localgov_services_parent')) {
        $form_display->setComponent('localgov_services_parent', [
          'type' => 'entity_reference_autocomplete',
          'region' => 'content',
          'settings' => [
            'match_operator' => 'CONTAINS',
            'size' => '60',
            'placeholder' => '',
            'match_limit' => 10,
          ],
          'weight' => 51,
        ])->save();
      }
      if ($topics && !$form_display->getComponent('localgov_topics')) {
        $form_display->setComponent('field_topic_term', [
          'type' => 'entity_reference_autocomplete',
          'region' => 'content',
          'settings' => [
            'match_operator' => 'CONTAINS',
            'size' => '60',
            'placeholder' => '',
            'match_limit' => 10,
          ],
          'weight' => 50,
        ])->save();
      }
    }
  }
}
